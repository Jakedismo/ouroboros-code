Error starting OpenTelemetry SDK: Error: exportIntervalMillis must be greater than or equal to exportTimeoutMillis
    at new PeriodicExportingMetricReader2 (file:///opt/homebrew/lib/node_modules/@ouroboros/ouroboros-code/bundle/ouroboros-code.js:126043:17)
    at file:///opt/homebrew/lib/node_modules/@ouroboros/ouroboros-code/bundle/ouroboros-code.js:136536:34
    at Array.forEach (<anonymous>)
    at configureMetricProviderFromEnv (file:///opt/homebrew/lib/node_modules/@ouroboros/ouroboros-code/bundle/ouroboros-code.js:136529:24)
    at NodeSDK2.start (file:///opt/homebrew/lib/node_modules/@ouroboros/ouroboros-code/bundle/ouroboros-code.js:136704:38)
    at initializeTelemetry (file:///opt/homebrew/lib/node_modules/@ouroboros/ouroboros-code/bundle/ouroboros-code.js:140641:9)
    at new Config (file:///opt/homebrew/lib/node_modules/@ouroboros/ouroboros-code/bundle/ouroboros-code.js:241363:11)
    at loadCliConfig (file:///opt/homebrew/lib/node_modules/@ouroboros/ouroboros-code/bundle/ouroboros-code.js:321476:10)
    at async main (file:///opt/homebrew/lib/node_modules/@ouroboros/ouroboros-code/bundle/ouroboros-code.js:332645:18)
[main] About to initialize config
MCP ERROR (ouroboros): Error: Streamable HTTP error: Failed to open SSE stream: Not Found
MCP ERROR (ouroboros): Error: Streamable HTTP error: Failed to open SSE stream: Not Found
[main] Config initialized
[Config.refreshAuth] Called with authMethod: gemini-api-key, provider: openai
[Config.refreshAuth] Creating content generator config
[Config.refreshAuth] Content generator config created
[Config.refreshAuth] Creating new GeminiClient
[Config.refreshAuth] About to initialize GeminiClient
[Config.refreshAuth] GeminiClient initialized
[Config.refreshAuth] Completed successfully
[Turn] Using provider-aware streaming for: openai
[OpenAI ContentGenerator] convertToMessages input type: object
[OpenAI ContentGenerator] convertToMessages isArray: true
[OpenAI ContentGenerator] Array length: 3
[OpenAI ContentGenerator] Item 0 type: object
[OpenAI ContentGenerator] Item 0 keys: [ 'role', 'parts' ]
[OpenAI ContentGenerator] Item 1 type: object
[OpenAI ContentGenerator] Item 1 keys: [ 'role', 'parts' ]
[OpenAI ContentGenerator] Item 2 type: object
[OpenAI ContentGenerator] Item 2 keys: [ 'role', 'parts' ]
[OpenAI ContentGenerator] Processing item 0, type: object
[OpenAI ContentGenerator] Adding Content object as user message at index 0
[OpenAI ContentGenerator] Processing item 1, type: object
[OpenAI ContentGenerator] Adding Content object as assistant message at index 1
[OpenAI ContentGenerator] Processing item 2, type: object
[OpenAI ContentGenerator] Adding Content object as user message at index 2
[OpenAI ContentGenerator] Final messages count: 3
[OpenAI ContentGenerator] Message 0: role=user, content length=5346
[OpenAI ContentGenerator] Message 1: role=assistant, content length=31
[OpenAI ContentGenerator] Message 2: role=user, content length=8
[OpenAI Streaming] Model to use: gpt-5 Config: {
  "temperature": 0.7,
  "maxOutputTokens": 8192,
  "parallel_tool_calls": true,
  "tools": [
    {
      "functionDeclarations": [
        {
          "name": "list_directory",
          "description": "Lists the names of files and subdirectories directly within a specified directory path. Can optionally ignore entries matching provided glob patterns.",
          "parametersJsonSchema": {
            "properties": {
              "path": {
                "description": "The absolute path to the directory to list (must be absolute, not relative)",
                "type": "string"
              },
              "ignore": {
                "description": "List of glob patterns to ignore",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "file_filtering_options": {
                "description": "Optional: Whether to respect ignore patterns from .gitignore or .geminiignore",
                "type": "object",
                "properties": {
                  "respect_git_ignore": {
                    "description": "Optional: Whether to respect .gitignore patterns when listing files. Only available in git repositories. Defaults to true.",
                    "type": "boolean"
                  },
                  "respect_gemini_ignore": {
                    "description": "Optional: Whether to respect .geminiignore patterns when listing files. Defaults to true.",
                    "type": "boolean"
                  }
                }
              }
            },
            "required": [
              "path"
            ],
            "type": "object"
          }
        },
        {
          "name": "read_file",
          "description": "Reads and returns the content of a specified file. If the file is large, the content will be truncated. The tool's response will clearly indicate if truncation has occurred and will provide details on how to read more of the file using the 'offset' and 'limit' parameters. Handles text, images (PNG, JPG, GIF, WEBP, SVG, BMP), and PDF files. For text files, it can read specific line ranges.",
          "parametersJsonSchema": {
            "properties": {
              "absolute_path": {
                "description": "The absolute path to the file to read (e.g., '/home/user/project/file.txt'). Relative paths are not supported. You must provide an absolute path.",
                "type": "string"
              },
              "offset": {
                "description": "Optional: For text files, the 0-based line number to start reading from. Requires 'limit' to be set. Use for paginating through large files.",
                "type": "number"
              },
              "limit": {
                "description": "Optional: For text files, maximum number of lines to read. Use with 'offset' to paginate through large files. If omitted, reads the entire file (if feasible, up to a default limit).",
                "type": "number"
              }
            },
            "required": [
              "absolute_path"
            ],
            "type": "object"
          }
        },
        {
          "name": "search_file_content",
          "description": "Searches for a regular expression pattern within the content of files in a specified directory (or current working directory). Can filter files by a glob pattern. Returns the lines containing matches, along with their file paths and line numbers.",
          "parametersJsonSchema": {
            "properties": {
              "pattern": {
                "description": "The regular expression (regex) pattern to search for within file contents (e.g., 'function\\s+myFunction', 'import\\s+\\{.*\\}\\s+from\\s+.*').",
                "type": "string"
              },
              "path": {
                "description": "Optional: The absolute path to the directory to search within. If omitted, searches the current working directory.",
                "type": "string"
              },
              "include": {
                "description": "Optional: A glob pattern to filter which files are searched (e.g., '*.js', '*.{ts,tsx}', 'src/**'). If omitted, searches all files (respecting potential global ignores).",
                "type": "string"
              }
            },
            "required": [
              "pattern"
            ],
            "type": "object"
          }
        },
        {
          "name": "glob",
          "description": "Efficiently finds files matching specific glob patterns (e.g., `src/**/*.ts`, `**/*.md`), returning absolute paths sorted by modification time (newest first). Ideal for quickly locating files based on their name or path structure, especially in large codebases.",
          "parametersJsonSchema": {
            "properties": {
              "pattern": {
                "description": "The glob pattern to match against (e.g., '**/*.py', 'docs/*.md').",
                "type": "string"
              },
              "path": {
                "description": "Optional: The absolute path to the directory to search within. If omitted, searches the root directory.",
                "type": "string"
              },
              "case_sensitive": {
                "description": "Optional: Whether the search should be case-sensitive. Defaults to false.",
                "type": "boolean"
              },
              "respect_git_ignore": {
                "description": "Optional: Whether to respect .gitignore patterns when finding files. Only available in git repositories. Defaults to true.",
                "type": "boolean"
              }
            },
            "required": [
              "pattern"
            ],
            "type": "object"
          }
        },
        {
          "name": "web_fetch",
          "description": "Processes content from URL(s), including local and private network addresses (e.g., localhost), embedded in a prompt. Include up to 20 URLs and instructions (e.g., summarize, extract specific data) directly in the 'prompt' parameter.",
          "parametersJsonSchema": {
            "properties": {
              "prompt": {
                "description": "A comprehensive prompt that includes the URL(s) (up to 20) to fetch and specific instructions on how to process their content (e.g., \"Summarize https://example.com/article and extract key points from https://another.com/data\"). Must contain as least one URL starting with http:// or https://.",
                "type": "string"
              }
            },
            "required": [
              "prompt"
            ],
            "type": "object"
          }
        },
        {
          "name": "read_many_files",
          "description": "Reads content from multiple files specified by paths or glob patterns within a configured target directory. For text files, it concatenates their content into a single string. It is primarily designed for text-based files. However, it can also process image (e.g., .png, .jpg) and PDF (.pdf) files if their file names or extensions are explicitly included in the 'paths' argument. For these explicitly requested non-text files, their data is read and included in a format suitable for model consumption (e.g., base64 encoded).\n\nThis tool is useful when you need to understand or analyze a collection of files, such as:\n- Getting an overview of a codebase or parts of it (e.g., all TypeScript files in the 'src' directory).\n- Finding where specific functionality is implemented if the user asks broad questions about code.\n- Reviewing documentation files (e.g., all Markdown files in the 'docs' directory).\n- Gathering context from multiple configuration files.\n- When the user asks to \"read all files in X directory\" or \"show me the content of all Y files\".\n\nUse this tool when the user's query implies needing the content of several files simultaneously for context, analysis, or summarization. For text files, it uses default UTF-8 encoding and a '--- {filePath} ---' separator between file contents. The tool inserts a '--- End of content ---' after the last file. Ensure paths are relative to the target directory. Glob patterns like 'src/**/*.js' are supported. Avoid using for single files if a more specific single-file reading tool is available, unless the user specifically requests to process a list containing just one file via this tool. Other binary files (not explicitly requested as image/PDF) are generally skipped. Default excludes apply to common non-text files (except for explicitly requested images/PDFs) and large dependency directories unless 'useDefaultExcludes' is false.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "paths": {
                "type": "array",
                "items": {
                  "type": "string",
                  "minLength": 1
                },
                "minItems": 1,
                "description": "Required. An array of glob patterns or paths relative to the tool's target directory. Examples: ['src/**/*.ts'], ['README.md', 'docs/']"
              },
              "include": {
                "type": "array",
                "items": {
                  "type": "string",
                  "minLength": 1
                },
                "description": "Optional. Additional glob patterns to include. These are merged with `paths`. Example: \"*.test.ts\" to specifically add test files if they were broadly excluded.",
                "default": []
              },
              "exclude": {
                "type": "array",
                "items": {
                  "type": "string",
                  "minLength": 1
                },
                "description": "Optional. Glob patterns for files/directories to exclude. Added to default excludes if useDefaultExcludes is true. Example: \"**/*.log\", \"temp/\"",
                "default": []
              },
              "recursive": {
                "type": "boolean",
                "description": "Optional. Whether to search recursively (primarily controlled by `**` in glob patterns). Defaults to true.",
                "default": true
              },
              "useDefaultExcludes": {
                "type": "boolean",
                "description": "Optional. Whether to apply a list of default exclusion patterns (e.g., node_modules, .git, binary files). Defaults to true.",
                "default": true
              },
              "file_filtering_options": {
                "description": "Whether to respect ignore patterns from .gitignore or .geminiignore",
                "type": "object",
                "properties": {
                  "respect_git_ignore": {
                    "description": "Optional: Whether to respect .gitignore patterns when listing files. Only available in git repositories. Defaults to true.",
                    "type": "boolean"
                  },
                  "respect_gemini_ignore": {
                    "description": "Optional: Whether to respect .geminiignore patterns when listing files. Defaults to true.",
                    "type": "boolean"
                  }
                }
              }
            },
            "required": [
              "paths"
            ]
          }
        },
        {
          "name": "save_memory",
          "description": "\nSaves a specific piece of information or fact to your long-term memory.\n\nUse this tool:\n\n- When the user explicitly asks you to remember something (e.g., \"Remember that I like pineapple on pizza\", \"Please save this: my cat's name is Whiskers\").\n- When the user states a clear, concise fact about themselves, their preferences, or their environment that seems important for you to retain for future interactions to provide a more personalized and effective assistance.\n\nDo NOT use this tool:\n\n- To remember conversational context that is only relevant for the current session.\n- To save long, complex, or rambling pieces of text. The fact should be relatively short and to the point.\n- If you are unsure whether the information is a fact worth remembering long-term. If in doubt, you can ask the user, \"Should I remember that for you?\"\n\n## Parameters\n\n- `fact` (string, required): The specific fact or piece of information to remember. This should be a clear, self-contained statement. For example, if the user says \"My favorite color is blue\", the fact would be \"My favorite color is blue\".\n",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "fact": {
                "type": "string",
                "description": "The specific fact or piece of information to remember. Should be a clear, self-contained statement."
              }
            },
            "required": [
              "fact"
            ]
          }
        },
        {
          "name": "google_web_search",
          "description": "Performs a web search using Google Search (via the Gemini API) and returns the results. This tool is useful for finding information on the internet based on a query.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "The search query to find information on the web."
              }
            },
            "required": [
              "query"
            ]
          }
        },
        {
          "name": "swarm_agent",
          "description": "Manage AI agents in a swarm topology for distributed task execution. Provider parameter is MANDATORY for spawn actions.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "spawn",
                  "spawn_custom_persona",
                  "status",
                  "result",
                  "cancel",
                  "list"
                ]
              },
              "persona": {
                "type": "string"
              },
              "task": {
                "type": "string"
              },
              "agentId": {
                "type": "string"
              },
              "provider": {
                "type": "string",
                "enum": [
                  "codex",
                  "claude",
                  "gemini"
                ]
              },
              "model": {
                "type": "string"
              },
              "context": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              "timeout": {
                "type": "number"
              },
              "personaDefinition": {
                "type": "string"
              },
              "spawningProvider": {
                "type": "string",
                "enum": [
                  "claude",
                  "gemini",
                  "codex"
                ]
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "action"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "swarm_notify",
          "description": "Send A2A notifications to change orchestration modes of already-spawned agents",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "workflow": {
                "type": "string",
                "enum": [
                  "parallel",
                  "sequential",
                  "hierarchical",
                  "mesh"
                ]
              },
              "agents": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": true
                    }
                  ]
                }
              },
              "message": {
                "type": "string"
              },
              "guildId": {
                "type": "string"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "workflow",
              "agents"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "multi_topology_orchestrate",
          "description": "Orchestrate multi-agent workflows across 8 different topologies (swarm, cluster-meshes, hierarchical, etc.). Provider parameter is MANDATORY for create/execute actions. Supports cluster spawning and advanced coordination strategies.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "create",
                  "execute",
                  "status",
                  "cancel",
                  "list",
                  "result"
                ]
              },
              "sessionId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "strategy": {
                "type": "string",
                "enum": [
                  "sequential",
                  "parallel",
                  "adaptive",
                  "hierarchical",
                  "consensus"
                ]
              },
              "tasks": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": true
                    }
                  ]
                }
              },
              "provider": {
                "type": "string",
                "enum": [
                  "codex",
                  "claude",
                  "gemini"
                ]
              },
              "model": {
                "type": "string"
              },
              "spawn_interactive": {
                "type": "boolean"
              },
              "topology": {
                "type": "string",
                "enum": [
                  "swarm",
                  "cluster-meshes",
                  "collective-intelligence",
                  "hierarchical",
                  "terminal-bench",
                  "neural-garden",
                  "quantum-mesh",
                  "mao"
                ]
              },
              "options": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "action"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "swarm_pipeline",
          "description": "Create and manage task pipelines with dependency resolution",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "create",
                  "add_stage",
                  "remove_stage",
                  "execute",
                  "visualize"
                ]
              },
              "pipelineId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "stages": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": true
                    }
                  ]
                }
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "action"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "worktree_manager",
          "description": "Manage Git worktrees for parallel development",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "create",
                  "remove",
                  "list",
                  "lock",
                  "unlock",
                  "prune",
                  "move",
                  "repair"
                ]
              },
              "branch": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "newPath": {
                "type": "string"
              },
              "force": {
                "type": "boolean"
              },
              "track": {
                "type": "string"
              },
              "reason": {
                "type": "string"
              },
              "baseBranch": {
                "type": "string"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "action"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "worktree_sync",
          "description": "Synchronize worktrees with remote branches",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "sync",
                  "merge",
                  "rebase",
                  "fetch",
                  "push",
                  "status"
                ]
              },
              "worktree": {
                "type": "string"
              },
              "branch": {
                "type": "string"
              },
              "strategy": {
                "type": "string",
                "enum": [
                  "merge",
                  "rebase",
                  "fast-forward"
                ]
              },
              "remote": {
                "type": "string"
              },
              "all": {
                "type": "boolean"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "action"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "worktree_workflow",
          "description": "Advanced worktree workflows and automation",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "workflow": {
                "type": "string",
                "enum": [
                  "feature",
                  "hotfix",
                  "release",
                  "experiment",
                  "review"
                ]
              },
              "name": {
                "type": "string"
              },
              "baseBranch": {
                "type": "string"
              },
              "reviewBranch": {
                "type": "string"
              },
              "parallel": {
                "type": "boolean"
              },
              "tasks": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": true
                    }
                  ]
                }
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "workflow",
              "name"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "swarm_persona",
          "description": "Unified persona management with action-specific parameters:\n\nACTION: get - Get specific persona\nREQUIRED: action=\"get\", persona_name (string)\nOPTIONAL: include_prompt (boolean), include_metadata (boolean)\n\nACTION: list - List all personas\nREQUIRED: action=\"list\"\nOPTIONAL: category, include_backup, include_mutations\n\nACTION: details - Get detailed persona info\nREQUIRED: action=\"details\", persona_name (string)\nOPTIONAL: include_prompt (boolean), include_metadata (boolean)\n\nACTION: validate - Validate persona content\nREQUIRED: action=\"validate\"\nOPTIONAL: content (string) OR persona_name (string) - one is required\n\nACTION: search - Search personas\nREQUIRED: action=\"search\", query (string)\nOPTIONAL: search_in (enum)\n\nACTION: cache_clear - Clear persona caches\nREQUIRED: action=\"cache_clear\"\nOPTIONAL: persona_name (string) - if provided, clears only that persona's cache\n\nACTION: cache_stats - Get cache statistics\nREQUIRED: action=\"cache_stats\"",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "action"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "swarm_list_agent_personas",
          "description": "List all available agent personas with mutation support details",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "action"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "swarm_memory",
          "description": "Enhanced unified memory management with tiered architecture support:\n\nBACKWARD COMPATIBLE: All existing calls work unchanged\n\nACTION: store - Store data in memory (ENHANCED)\nREQUIRED: action=\"store\", key (string), value (any)\nOPTIONAL: ttl (number), tier (string: \"agent\"|\"project\"|\"cross-project\"|\"global\"), share_scope (string)\n\nACTION: get - Retrieve data from memory (ENHANCED)\nREQUIRED: action=\"get\"\nOPTIONAL: key (string) OR pattern (string), search_tiers (array), max_results (number)\n\nACTION: delete - Remove data from memory (ENHANCED)\nREQUIRED: action=\"delete\", key (string)\nOPTIONAL: tier (string), cascade (boolean)\n\nACTION: list - List all memory keys (ENHANCED)\nREQUIRED: action=\"list\"\nOPTIONAL: namespace (string), tier (string), include_metadata (boolean)\n\nACTION: cleanup - Clean up old memory (ENHANCED)\nREQUIRED: action=\"cleanup\"\nOPTIONAL: force (boolean), tier (string), max_age (number)\n\nACTION: stats - Get memory statistics (ENHANCED)\nREQUIRED: action=\"stats\"\nOPTIONAL: tier (string), include_patterns (boolean)\n\nACTION: sync - Sync cross-project memory (NEW)\nREQUIRED: action=\"sync\"\nOPTIONAL: project_ids (array), tier (string), direction (string)\n\nACTION: patterns - Get cross-tier patterns (NEW)\nREQUIRED: action=\"patterns\", domain (string)\nOPTIONAL: confidence_threshold (number), max_patterns (number)\n\nACTION: promote - Promote entry to higher tier (NEW)\nREQUIRED: action=\"promote\", key (string), target_tier (string)\nOPTIONAL: reason (string), force (boolean)",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "action"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "swarm_orchestrate",
          "description": "Unified orchestration and monitoring with action-specific parameters:\n\nACTION: status - Get detailed swarm status\nREQUIRED: action=\"status\"\nOPTIONAL: includeAgents, includeTasks, includeMemory, detail, agentLimit, taskLimit, outputTruncate, activeOnly, includeRecentActivity\n\nACTION: summary - Get lightweight swarm summary\nREQUIRED: action=\"summary\"\nOPTIONAL: includeAgents, includeTasks, detail, agentLimit, taskLimit\n\nACTION: config - Get swarm configuration\nREQUIRED: action=\"config\"\nOPTIONAL: include_tool_details, include_persona_details\n\nACTION: queue - Manage task queue\nREQUIRED: action=\"queue\"\nOPTIONAL: operation, taskId, priority, filter, limit, include_performance, include_capacity, time_range\n\nACTION: plan - Create orchestration plan (future)\nREQUIRED: action=\"plan\", strategy (string), objective (string)\n\nACTION: execute - Execute orchestration plan (future)\nREQUIRED: action=\"execute\", strategy (string), objective (string)\n\nACTION: cost_summary - Get cost tracking information\nREQUIRED: action=\"cost_summary\"\nOPTIONAL: None - Returns global cost summary, efficiency metrics, and per-agent costs\n\nACTION: cost_recovery - Recover historical cost data from completed agents\nREQUIRED: action=\"cost_recovery\"\nOPTIONAL: None - Analyzes completed agents and estimates their historical costs\n\nACTION: force_complete - Force completion of stuck agents\nREQUIRED: action=\"force_complete\"\nOPTIONAL: None - Manually forces completion of agents that appear stuck",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "action"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "swarm_terminal",
          "description": "Unified terminal management operations for agent terminal sessions and user terminal detection\n\n╔═══════════════════════════════════════════════════════════════════════════════════════════════════╗\n║                                    TERMINAL TOOL MODES                                            ║\n╚═══════════════════════════════════════════════════════════════════════════════════════════════════╝\n\n🚀 SPAWN MODE - Create new terminal sessions\n   Required: action=\"spawn\" + EITHER agent_id OR command\n\n   AGENT SPAWNING (agent_id mode):\n   ├─ agent_id (required): Agent ID to spawn terminal for\n   ├─ agent_type (optional): Type of agent (developer, tester, etc.)\n   ├─ agent_task (optional): Task description for the agent\n   ├─ provider (optional): AI provider (claude, gemini, codex)\n   └─ terminal_title (optional): Custom window title\n\n   COMMAND SPAWNING (command mode):\n   ├─ command (required): Shell command to execute\n   │   Examples: \"ls -la\", \"npm start\", \"echo 'hello world'\"\n   ├─ working_directory (optional): Path to run command in\n   │   Examples: \"/path/to/project\", \"./src\", \"~/Documents\"\n   ├─ terminal_app (optional): Preferred terminal app\n   │   Options: \"Warp\", \"iTerm2\", \"Ghostty\", \"Terminal\" (macOS)\n   ├─ terminal_title (optional): Custom window title\n   │   Examples: \"Build Process\", \"Test Runner\", \"Development Server\"\n   └─ force_new_window (optional): Force new window vs tab (default: false)\n\n   SHARED OPTIONS:\n   ├─ session_id (optional): Custom session ID (auto-generated if not provided)\n   └─ force_new_window (optional): Force new window instead of tab\n\n🔗 ATTACH MODE - Attach monitoring terminal to running process (macOS only)\n   Required: action=\"attach\" + EITHER pid OR agent_id\n\n   PROCESS ATTACHMENT (pid mode):\n   ├─ pid (required): Process ID to monitor\n   ├─ monitoring_type (optional): \"stdio\", \"logs\", \"trace\" (default: \"logs\")\n   └─ terminal_title (optional): Custom title for monitor window\n\n   AGENT ATTACHMENT (agent_id mode):\n   ├─ agent_id (required): Agent ID to monitor\n   ├─ monitoring_type (optional): \"stdio\", \"logs\", \"trace\" (default: \"logs\")\n   ├─ terminal_app (optional): Preferred terminal for monitor\n   └─ show_history (optional): Include past logs (default: false)\n\n❌ CLOSE MODE - Close terminal sessions\n   Required: action=\"close\" + EITHER terminal_id OR agent_id\n\n   ├─ terminal_id (string): Specific terminal session ID to close\n   ├─ agent_id (string): Agent ID whose terminal to close\n   ├─ cleanup_agents (boolean, default: true): Also cleanup associated agents\n   └─ reason (string, optional): Reason for closure (for logging)\n\n📋 LIST MODE - List all terminal sessions\n   Required: action=\"list\"\n\n   FILTERS (all optional):\n   ├─ status_filter: \"starting\", \"active\", \"completed\", \"failed\"\n   ├─ provider_filter: Filter by AI provider name\n   ├─ include_closed (boolean, default: false): Include terminated sessions\n   └─ include_user_terminals (boolean, default: true): Include user-opened terminals\n\n🔍 GET MODE - Get detailed terminal session info\n   Required: action=\"get\" + EITHER sessionId OR agentId\n\n   ├─ sessionId (string): Terminal session ID to get details for\n   └─ agentId (string): Agent ID to get terminal details for\n\n📊 STATUS MODE - Get overall terminal status summary\n   Required: action=\"status\"\n\n   └─ detailed (boolean, default: false): Include detailed breakdown\n\n🔎 SCAN MODE - Scan for user terminals running ouroboros\n   Required: action=\"scan\"\n\n   └─ detailed (boolean, default: false): Include process details\n\n╔═══════════════════════════════════════════════════════════════════════════════════════════════════╗\n║                                      USAGE EXAMPLES                                               ║\n╚═══════════════════════════════════════════════════════════════════════════════════════════════════╝\n\nSpawn with command:\n  action=\"spawn\", command=\"npm start\", working_directory=\"./frontend\", terminal_title=\"Dev Server\"\n\nSpawn for agent:\n  action=\"spawn\", agent_id=\"agent-123\", agent_type=\"developer\", terminal_title=\"Code Review\"\n\nAttach to headless agent:\n  action=\"attach\", agent_id=\"agent-456\", monitoring_type=\"logs\"\n\nAttach to process:\n  action=\"attach\", pid=12345, monitoring_type=\"trace\"\n\nList active terminals:\n  action=\"list\", status_filter=\"active\", include_user_terminals=true\n\nClose specific terminal:\n  action=\"close\", terminal_id=\"terminal-456\", cleanup_agents=false, reason=\"Task completed\"\n\nGet terminal details:\n  action=\"get\", sessionId=\"terminal-789\"\n\nCheck status:\n  action=\"status\", detailed=true",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "action"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "swarm_task",
          "description": "Unified task queue management with action-specific parameters:\n\nACTION: add - Create a new task\nREQUIRED: action=\"add\", task (string)\nOPTIONAL: description, type, priority, dependencies, metadata, assigned_to, estimated_duration, timeout\n\nACTION: status - Check task status\nREQUIRED: action=\"status\"\nOPTIONAL: task_id (string, omit for queue overview), include_details (boolean)\n\nACTION: update - Update existing task\nREQUIRED: action=\"update\", task_id (string)\nOPTIONAL: status, progress, notes, result, error\n\nACTION: remove - Remove a task\nREQUIRED: action=\"remove\", task_id (string)\nOPTIONAL: reason (string)\n\nACTION: list - List all tasks\nREQUIRED: action=\"list\"\nOPTIONAL: filter (object), limit, sort_by\n\nACTION: prioritize - Change task priority\nREQUIRED: action=\"prioritize\", new_priority (enum), task_id OR task_ids\nOPTIONAL: Either task_id (single) or task_ids (array)",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "action"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "project_metadata",
          "description": "Manage project context files (AGENTS.md, GEMINI.md, CLAUDE.md) with project metadata, technology choices, and architectural decisions",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "action"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "worktree",
          "description": "Git worktree management for hierarchical topology coordination:\n\nACTION: create - Create a new worktree for feature development\nREQUIRED: action=\"create\", feature_name (string), branch_name (string)\nOPTIONAL: base_branch (string), path (string), force (boolean)\n\nACTION: list - List all active worktrees\nREQUIRED: action=\"list\"\nOPTIONAL: include_main (boolean)\n\nACTION: remove - Remove an existing worktree\nREQUIRED: action=\"remove\", path (string)\nOPTIONAL: force (boolean)\n\nACTION: switch - Switch to a specific worktree\nREQUIRED: action=\"switch\", path (string)\n\nACTION: status - Get status of all worktrees\nREQUIRED: action=\"status\"\nOPTIONAL: detailed (boolean)\n\nACTION: sync - Sync worktree with upstream\nREQUIRED: action=\"sync\", path (string)\nOPTIONAL: rebase (boolean)\n\nACTION: cleanup - Cleanup stale worktrees\nREQUIRED: action=\"cleanup\"\nOPTIONAL: dry_run (boolean)",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "action"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "file_memory_read",
          "description": "Read memories from file-based persistent storage across tiers",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "tiers": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": true
                    }
                  ]
                }
              },
              "agentId": {
                "type": "string"
              },
              "projectId": {
                "type": "string"
              },
              "sessionId": {
                "type": "string"
              },
              "keyPattern": {
                "type": "string"
              },
              "tags": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": true
                    }
                  ]
                }
              },
              "maxResults": {
                "type": "number"
              },
              "includeMetadata": {
                "type": "boolean"
              },
              "sortBy": {
                "type": "string",
                "enum": [
                  "created",
                  "lastAccessed",
                  "accessCount",
                  "importance"
                ]
              },
              "sortOrder": {
                "type": "string",
                "enum": [
                  "asc",
                  "desc"
                ]
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "file_memory_write",
          "description": "Write memories to file-based persistent storage with Git versioning",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "tier": {
                "type": "string",
                "enum": [
                  "agent",
                  "project",
                  "cross-project",
                  "global"
                ]
              },
              "agentId": {
                "type": "string"
              },
              "projectId": {
                "type": "string"
              },
              "sessionId": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "value": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "object",
                    "properties": {},
                    "additionalProperties": true
                  }
                ]
              },
              "metadata": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              "gitCommit": {
                "type": "boolean"
              },
              "commitMessage": {
                "type": "string"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "agentId",
              "projectId",
              "key",
              "value"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "file_memory_search",
          "description": "Search file-based memories with advanced filtering and ranking",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string"
              },
              "tiers": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": true
                    }
                  ]
                }
              },
              "agentId": {
                "type": "string"
              },
              "projectId": {
                "type": "string"
              },
              "tags": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": true
                    }
                  ]
                }
              },
              "importance": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              "timeRange": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              "maxResults": {
                "type": "number"
              },
              "includeContent": {
                "type": "boolean"
              },
              "fuzzySearch": {
                "type": "boolean"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "persona_evolution_load",
          "description": "Load evolved persona from file storage with history and evaluations",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "agentId": {
                "type": "string"
              },
              "projectId": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "includeHistory": {
                "type": "boolean"
              },
              "includeEvaluations": {
                "type": "boolean"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "agentId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "persona_evolution_save",
          "description": "Save persona evolution to file storage with optional evaluation scoring",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "agentId": {
                "type": "string"
              },
              "projectId": {
                "type": "string"
              },
              "persona": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              "evolution": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              "evaluation": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              "gitCommit": {
                "type": "boolean"
              },
              "memoryTier": {
                "type": "string",
                "enum": [
                  "agent",
                  "project",
                  "cross-project",
                  "global"
                ]
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "agentId",
              "projectId",
              "persona",
              "evolution"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "persona_evaluation_search",
          "description": "Search persona evaluations with scoring filters and performance analytics",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "agentId": {
                "type": "string"
              },
              "projectId": {
                "type": "string"
              },
              "scoreRange": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              "domain": {
                "type": "string"
              },
              "assessorType": {
                "type": "string",
                "enum": [
                  "self",
                  "peer",
                  "system",
                  "human"
                ]
              },
              "strengths": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": true
                    }
                  ]
                }
              },
              "weaknesses": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": true
                    }
                  ]
                }
              },
              "timeRange": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              "limit": {
                "type": "number"
              },
              "sortBy": {
                "type": "string",
                "enum": [
                  "score",
                  "timestamp",
                  "confidence"
                ]
              },
              "sortOrder": {
                "type": "string",
                "enum": [
                  "asc",
                  "desc"
                ]
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "request_evolution",
          "description": "Request evolution/improvement of your capabilities. Provide your improvement goal and context for the system to automatically handle fitness analysis, historical patterns, and spawn mutation specialists.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "improvement_goal": {
                "type": "string"
              },
              "current_challenge": {
                "type": "string"
              },
              "project_context": {
                "type": "string"
              },
              "tech_stack": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": true
                    }
                  ]
                }
              },
              "project_domain": {
                "type": "string"
              },
              "desired_capability": {
                "type": "string"
              },
              "performance_concern": {
                "type": "string"
              },
              "urgency": {
                "type": "string",
                "enum": [
                  "low",
                  "medium",
                  "high"
                ]
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "improvement_goal"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "check_evolution_status",
          "description": "Check the status of your evolution/mutation tasks to see progress and results.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "task_id": {
                "type": "string"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "cancel_evolution",
          "description": "Cancel an active evolution task if needed.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "task_id": {
                "type": "string"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "task_id"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "evolution_system_status",
          "description": "Get comprehensive status of the evolution system including active tasks, system health, and capabilities.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "include_details": {
                "type": "boolean"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "notification_create",
          "description": "Create a new notification for streaming to clients",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "progress",
                  "resource_discovered",
                  "resource_updated",
                  "tool_invocation",
                  "session_event",
                  "error",
                  "warning",
                  "info",
                  "debug",
                  "mcp_annotation"
                ]
              },
              "title": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "data": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              "sessionId": {
                "type": "string"
              },
              "level": {
                "type": "string",
                "enum": [
                  "error",
                  "warning",
                  "info",
                  "debug"
                ]
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "type",
              "title",
              "message"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "progress_create",
          "description": "Create a new progress tracker for long-running operations",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "tool_execution",
                  "resource_loading",
                  "agent_processing",
                  "custom"
                ]
              },
              "title": {
                "type": "string"
              },
              "total": {
                "type": "number"
              },
              "sessionId": {
                "type": "string"
              },
              "estimatedDuration": {
                "type": "number"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "type",
              "title",
              "total"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "progress_update",
          "description": "Update progress for an existing tracker",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "trackerId": {
                "type": "string"
              },
              "current": {
                "type": "number"
              },
              "stage": {
                "type": "string"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "trackerId",
              "current"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "progress_complete",
          "description": "Mark a progress tracker as completed",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "trackerId": {
                "type": "string"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "trackerId"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "resource_discover",
          "description": "Register a discovered resource with optional MCP annotations",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "uri": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "mimeType": {
                "type": "string"
              },
              "annotations": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "type",
              "name",
              "uri"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "notifications_list",
          "description": "Get list of notifications with optional filtering",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "sessionId": {
                "type": "string"
              },
              "since": {
                "type": "string"
              },
              "limit": {
                "type": "number"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "notifications_stats",
          "description": "Get notification streaming statistics",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "a2a_network",
          "description": "A2A network status and telemetry",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "status",
                  "list"
                ]
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "action"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "a2a_registry",
          "description": "Register and discover agents in the A2A network registry",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "register",
                  "unregister",
                  "discover",
                  "status",
                  "heartbeat",
                  "list"
                ]
              },
              "agentId": {
                "type": "string"
              },
              "agentName": {
                "type": "string"
              },
              "agentType": {
                "type": "string"
              },
              "capabilities": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": true
                    }
                  ]
                }
              },
              "projectId": {
                "type": "string"
              },
              "endpoint": {
                "type": "string"
              },
              "filter": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "action"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "a2a_coordinate",
          "description": "Coordinate agent interactions through A2A messaging and workflows",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "send",
                  "broadcast",
                  "receive",
                  "acknowledge",
                  "history",
                  "inbox",
                  "get",
                  "ack",
                  "topic_subscribe",
                  "topic_unsubscribe",
                  "list_subscriptions",
                  "guild_join",
                  "guild_leave",
                  "guild_list",
                  "guild_create",
                  "route_dry_run",
                  "security_check",
                  "routing_policy",
                  "security_policy"
                ]
              },
              "from": {
                "type": "string"
              },
              "to": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "request",
                  "response",
                  "broadcast",
                  "notification"
                ]
              },
              "content": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              "messageId": {
                "type": "string"
              },
              "sessionId": {
                "type": "string"
              },
              "topic": {
                "type": "string"
              },
              "topics": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": true
                    }
                  ]
                }
              },
              "limit": {
                "type": "number"
              },
              "unreadOnly": {
                "type": "boolean"
              },
              "since": {
                "type": "string"
              },
              "priority": {
                "type": "string",
                "enum": [
                  "low",
                  "normal",
                  "high",
                  "urgent"
                ]
              },
              "messageType": {
                "type": "string",
                "enum": [
                  "direct",
                  "broadcast",
                  "guild",
                  "system"
                ]
              },
              "timeout": {
                "type": "number"
              },
              "broadcast": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              "guildId": {
                "type": "string"
              },
              "guildName": {
                "type": "string"
              },
              "guildDescription": {
                "type": "string"
              },
              "guildType": {
                "type": "string",
                "enum": [
                  "public",
                  "private",
                  "project-scoped",
                  "cross-project"
                ]
              },
              "routingPolicy": {
                "type": "string",
                "enum": [
                  "deterministic_only",
                  "hybrid",
                  "semantic_prefer"
                ]
              },
              "includeAlternatives": {
                "type": "boolean"
              },
              "securityLevel": {
                "type": "string",
                "enum": [
                  "public",
                  "internal",
                  "confidential",
                  "restricted"
                ]
              },
              "dryRun": {
                "type": "boolean"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "action"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "a2a_coordination",
          "description": "Coordinate multi-agent workflows across projects",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "action": {
                "type": "string",
                "enum": [
                  "coordinate",
                  "vote",
                  "consensus",
                  "delegate",
                  "report"
                ]
              },
              "taskId": {
                "type": "string"
              },
              "task": {
                "type": "object",
                "properties": {},
                "additionalProperties": true
              },
              "agents": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": true
                    }
                  ]
                }
              },
              "strategy": {
                "type": "string",
                "enum": [
                  "round-robin",
                  "capability-based",
                  "load-balanced",
                  "priority"
                ]
              },
              "vote": {
                "type": "string",
                "enum": [
                  "approve",
                  "reject",
                  "abstain"
                ]
              },
              "threshold": {
                "type": "number"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor for continuing from previous page"
              }
            },
            "required": [
              "action"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "searchGitHub",
          "description": "Find real-world code examples from over a million public GitHub repositories to help answer programming questions.\n\n**IMPORTANT: This tool searches for literal code patterns (like grep), not keywords. Search for actual code that would appear in files:**\n- ✅ Good: 'useState(', 'import React from', 'async function', '(?s)try {.*await'\n- ❌ Bad: 'react tutorial', 'best practices', 'how to use'\n\n**When to use this tool:**\n- When implementing unfamiliar APIs or libraries and need to see real usage patterns\n- When unsure about correct syntax, parameters, or configuration for a specific library\n- When looking for production-ready examples and best practices for implementation\n- When needing to understand how different libraries or frameworks work together\n\n**Perfect for questions like:**\n- \"How do developers handle authentication in Next.js apps?\" → Search: 'getServerSession' with language=['TypeScript', 'TSX']\n- \"What are common React error boundary patterns?\" → Search: 'ErrorBoundary' with language=['TSX']\n- \"Show me real useEffect cleanup examples\" → Search: '(?s)useEffect\\(\\(\\) => {.*removeEventListener' with useRegexp=true\n- \"How do developers handle CORS in Flask applications?\" → Search: 'CORS(' with matchCase=true and language=['Python']\n\nUse regular expressions with useRegexp=true for flexible patterns like '(?s)useState\\(.*loading' to find useState hooks with loading-related variables. Prefix the pattern with '(?s)' to match across multiple lines.\n\nFilter by language, repository, or file path to narrow results.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "The literal code pattern to search for (e.g., 'useState(', 'export function'). Use actual code that would appear in files, not keywords or questions."
              },
              "matchCase": {
                "type": "boolean",
                "description": "Whether the search should be case sensitive",
                "default": false
              },
              "matchWholeWords": {
                "type": "boolean",
                "description": "Whether to match whole words only",
                "default": false
              },
              "useRegexp": {
                "type": "boolean",
                "description": "Whether to interpret the query as a regular expression",
                "default": false
              },
              "repo": {
                "type": "string",
                "description": "Filter by repository.\n            Examples: 'facebook/react', 'microsoft/vscode', 'vercel/ai'.\n            Can match partial names, for example 'vercel/' will find repositories in the vercel org."
              },
              "path": {
                "type": "string",
                "description": "Filter by file path.\n            Examples: 'src/components/Button.tsx', 'README.md'.\n            Can match partial paths, for example '/route.ts' will find route.ts files at any level."
              },
              "language": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Filter by programming language.\n            Examples: ['TypeScript', 'TSX'], ['JavaScript'], ['Python'], ['Java'], ['C#'], ['Markdown'], ['YAML']"
              }
            },
            "required": [
              "query"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "resolve-library-id",
          "description": "Resolves a package/product name to a Context7-compatible library ID and returns a list of matching libraries.\n\nYou MUST call this function before 'get-library-docs' to obtain a valid Context7-compatible library ID UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.\n\nSelection Process:\n1. Analyze the query to understand what library/package the user is looking for\n2. Return the most relevant match based on:\n- Name similarity to the query (exact matches prioritized)\n- Description relevance to the query's intent\n- Documentation coverage (prioritize libraries with higher Code Snippet counts)\n- Trust score (consider libraries with scores of 7-10 more authoritative)\n\nResponse Format:\n- Return the selected library ID in a clearly marked section\n- Provide a brief explanation for why this library was chosen\n- If multiple good matches exist, acknowledge this but proceed with the most relevant one\n- If no good matches exist, clearly state this and suggest query refinements\n\nFor ambiguous queries, request clarification before proceeding with a best-guess match.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "libraryName": {
                "type": "string",
                "description": "Library name to search for and retrieve a Context7-compatible library ID."
              }
            },
            "required": [
              "libraryName"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "get-library-docs",
          "description": "Fetches up-to-date documentation for a library. You must call 'resolve-library-id' first to obtain the exact Context7-compatible library ID required to use this tool, UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "context7CompatibleLibraryID": {
                "type": "string",
                "description": "Exact Context7-compatible library ID (e.g., '/mongodb/docs', '/vercel/next.js', '/supabase/supabase', '/vercel/next.js/v14.3.0-canary.87') retrieved from 'resolve-library-id' or directly from user query in the format '/org/project' or '/org/project/version'."
              },
              "topic": {
                "type": "string",
                "description": "Topic to focus documentation on (e.g., 'hooks', 'routing')."
              },
              "tokens": {
                "type": "number",
                "description": "Maximum number of tokens of documentation to retrieve (default: 10000). Higher values provide more context but consume more tokens."
              }
            },
            "required": [
              "context7CompatibleLibraryID"
            ],
            "additionalProperties": false,
            "$schema": "http://json-schema.org/draft-07/schema#"
          }
        },
        {
          "name": "chat",
          "description": "General chat and collaborative thinking partner for brainstorming, development discussion, getting second opinions, and exploring ideas. Use for bouncing ideas, validating approaches, asking questions, and getting explanations. ",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "Your question or idea for collaborative thinking. Provide detailed context, including your goal, what you've tried, and any specific challenges. CRITICAL: To discuss code, provide file paths using the 'files' parameter instead of pasting large code blocks here."
              },
              "files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Absolute full-paths to existing files / folders for context. DO NOT SHORTEN."
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional images for visual context (must be FULL absolute paths to real files / folders - DO NOT SHORTEN - OR these can be bas64 data)"
              },
              "model": {
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'gpt-5-mini': GPT-5-mini (400K context, 128K output) - Efficient variant with reasoning support\n- 'gpt-5-nano': GPT-5 nano (400K context) - Fastest, cheapest version of GPT-5 for summarization and classification tasks\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window",
                "enum": [
                  "gpt-4.1",
                  "gpt-5",
                  "gpt-5-mini",
                  "gpt-5-nano",
                  "gpt4.1",
                  "gpt5",
                  "gpt5-mini",
                  "gpt5-nano",
                  "gpt5mini",
                  "gpt5nano",
                  "mini",
                  "nano",
                  "o3",
                  "o3-mini",
                  "o3-pro",
                  "o3mini",
                  "o4-mini",
                  "o4mini"
                ]
              },
              "temperature": {
                "type": "number",
                "description": "Lower values: focused/deterministic; higher: creative. Tool-specific defaults apply if unspecified.",
                "minimum": 0,
                "maximum": 1
              },
              "thinking_mode": {
                "type": "string",
                "enum": [
                  "minimal",
                  "low",
                  "medium",
                  "high",
                  "max"
                ],
                "description": "Thinking depth: minimal (0.5%), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes: deeper reasoning but slower."
              },
              "use_websearch": {
                "type": "boolean",
                "description": "Enable web search for docs and current info. Model can request Claude to perform web-search for best practices, framework docs, solution research, latest API information.",
                "default": true
              },
              "continuation_id": {
                "type": "string",
                "description": "Unique thread continuation ID for multi-turn conversations. Reuse last continuation_id when continuing discussion (unless user provides different ID) using exact unique identifer. Embeds complete conversation history. Build upon history without repeating. Focus on new insights. Works across different tools."
              }
            },
            "required": [
              "prompt",
              "model"
            ]
          }
        },
        {
          "name": "thinkdeep",
          "description": "Performs multi-stage investigation and reasoning for complex problem analysis. Use for architecture decisions, complex bugs, performance challenges, and security analysis. Provides systematic hypothesis testing, evidence-based investigation, and expert validation.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "step": {
                "type": "string",
                "description": "Current work step content and findings from your overall work"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "Current step number in work sequence (starts at 1)"
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Estimated total steps needed to complete work"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Whether another work step is needed. When false, aim to reduce total_steps to match step_number to avoid mismatch."
              },
              "findings": {
                "type": "string",
                "description": "Important findings, evidence and insights discovered in this step"
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of files examined during this work step"
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Files identified as relevant to issue/goal (FULL absolute paths to real files/folders - DO NOT SHORTEN)"
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Issues identified with severity levels during work"
              },
              "confidence": {
                "type": "string",
                "enum": [
                  "exploring",
                  "low",
                  "medium",
                  "high",
                  "very_high",
                  "almost_certain",
                  "certain"
                ],
                "description": "Confidence level: exploring (just starting), low (early investigation), medium (some evidence), high (strong evidence), very_high (comprehensive understanding), almost_certain (near complete confidence), certain (100% confidence locally - no external validation needed)"
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about issue/goal based on work"
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "Step number to backtrack from if work needs revision"
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Use assistant model for expert analysis after workflow steps. False skips expert analysis, relies solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "temperature": {
                "type": "number",
                "description": "Lower values: focused/deterministic; higher: creative. Tool-specific defaults apply if unspecified.",
                "minimum": 0,
                "maximum": 1
              },
              "thinking_mode": {
                "type": "string",
                "enum": [
                  "minimal",
                  "low",
                  "medium",
                  "high",
                  "max"
                ],
                "description": "Thinking depth: minimal (0.5%), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes: deeper reasoning but slower."
              },
              "use_websearch": {
                "type": "boolean",
                "description": "Enable web search for docs and current info. Model can request Claude to perform web-search for best practices, framework docs, solution research, latest API information.",
                "default": true
              },
              "continuation_id": {
                "type": "string",
                "description": "Unique thread continuation ID for multi-turn conversations. Reuse last continuation_id when continuing discussion (unless user provides different ID) using exact unique identifer. Embeds complete conversation history. Build upon history without repeating. Focus on new insights. Works across different tools."
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional images for visual context. MUST be absolute paths or base64. Use when user mentions images. Describe image contents. "
              },
              "model": {
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'gpt-5-mini': GPT-5-mini (400K context, 128K output) - Efficient variant with reasoning support\n- 'gpt-5-nano': GPT-5 nano (400K context) - Fastest, cheapest version of GPT-5 for summarization and classification tasks\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window",
                "enum": [
                  "gpt-4.1",
                  "gpt-5",
                  "gpt-5-mini",
                  "gpt-5-nano",
                  "gpt4.1",
                  "gpt5",
                  "gpt5-mini",
                  "gpt5-nano",
                  "gpt5mini",
                  "gpt5nano",
                  "mini",
                  "nano",
                  "o3",
                  "o3-mini",
                  "o3-pro",
                  "o3mini",
                  "o4-mini",
                  "o4mini"
                ]
              },
              "problem_context": {
                "type": "string",
                "description": "Additional context about problem/goal. Be expressive."
              },
              "focus_areas": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Focus aspects (architecture, performance, security, etc.)"
              }
            },
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "additionalProperties": false,
            "title": "ThinkdeepRequest"
          }
        },
        {
          "name": "planner",
          "description": "Breaks down complex tasks through interactive, sequential planning with revision and branching capabilities. Use for complex project planning, system design, migration strategies, and architectural decisions. Builds plans incrementally with deep reflection for complex scenarios.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "step": {
                "type": "string",
                "description": "Your current planning step content. Step 1: Describe the task/problem to plan in detail for breakdown. Subsequent steps: Provide planning content (steps, revisions, questions, approach changes, etc.)."
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "Current step number in work sequence (starts at 1)"
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Estimated total steps needed to complete work"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Whether another work step is needed. When false, aim to reduce total_steps to match step_number to avoid mismatch."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Use assistant model for expert analysis after workflow steps. False skips expert analysis, relies solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "continuation_id": {
                "type": "string",
                "description": "Unique thread continuation ID for multi-turn conversations. Reuse last continuation_id when continuing discussion (unless user provides different ID) using exact unique identifer. Embeds complete conversation history. Build upon history without repeating. Focus on new insights. Works across different tools."
              },
              "model": {
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'gpt-5-mini': GPT-5-mini (400K context, 128K output) - Efficient variant with reasoning support\n- 'gpt-5-nano': GPT-5 nano (400K context) - Fastest, cheapest version of GPT-5 for summarization and classification tasks\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window",
                "enum": [
                  "gpt-4.1",
                  "gpt-5",
                  "gpt-5-mini",
                  "gpt-5-nano",
                  "gpt4.1",
                  "gpt5",
                  "gpt5-mini",
                  "gpt5-nano",
                  "gpt5mini",
                  "gpt5nano",
                  "mini",
                  "nano",
                  "o3",
                  "o3-mini",
                  "o3-pro",
                  "o3mini",
                  "o4-mini",
                  "o4mini"
                ]
              },
              "is_step_revision": {
                "type": "boolean",
                "description": "True if this step revises/replaces a previous step"
              },
              "revises_step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "If is_step_revision is true, which step number is being revised"
              },
              "is_branch_point": {
                "type": "boolean",
                "description": "True if this step branches from a previous step to explore alternatives"
              },
              "branch_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If is_branch_point is true, which step number is the branching point"
              },
              "branch_id": {
                "type": "string",
                "description": "Identifier for the current branch (e.g., 'approach-A', 'microservices-path')"
              },
              "more_steps_needed": {
                "type": "boolean",
                "description": "True if more steps are needed beyond the initial estimate"
              }
            },
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "model"
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "additionalProperties": false,
            "title": "PlannerRequest"
          }
        },
        {
          "name": "consensus",
          "description": "Builds multi-model consensus through systematic analysis and structured debate. Use for complex decisions, architectural choices, feature proposals, and technology evaluations. Consults multiple models with different stances to synthesize comprehensive recommendations.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "step": {
                "type": "string",
                "description": "The core question for consensus. Step 1: Provide the EXACT proposal for all models to evaluate. CRITICAL: This text is sent to all models and must be a clear question, not a self-referential statement (e.g., use 'Evaluate...' not 'I will evaluate...'). Steps 2+: Internal notes on the last model's response; this is NOT sent to other models."
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the consensus workflow, beginning at 1. Step 1 is your analysis, steps 2+ are for processing individual model responses."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Total number of steps needed. This equals the number of models to consult. Step 1 includes your analysis + first model consultation on return of the call. Final step includes last model consultation + synthesis."
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if more models need to be consulted. False when ready for final synthesis."
              },
              "findings": {
                "type": "string",
                "description": "Your analysis of the consensus topic. Step 1: Your independent, comprehensive analysis of the proposal. CRITICAL: This is for the final synthesis and is NOT sent to the other models. Steps 2+: A summary of the key points from the most recent model's response."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Files that are relevant to the consensus analysis. Include files that help understand the proposal, provide context, or contain implementation details."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Use assistant model for expert analysis after workflow steps. False skips expert analysis, relies solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "continuation_id": {
                "type": "string",
                "description": "Unique thread continuation ID for multi-turn conversations. Reuse last continuation_id when continuing discussion (unless user provides different ID) using exact unique identifer. Embeds complete conversation history. Build upon history without repeating. Focus on new insights. Works across different tools."
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of image paths or base64 data URLs for visual context. Useful for UI/UX discussions, architecture diagrams, mockups, or any visual references that help inform the consensus analysis."
              },
              "model": {
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'gpt-5-mini': GPT-5-mini (400K context, 128K output) - Efficient variant with reasoning support\n- 'gpt-5-nano': GPT-5 nano (400K context) - Fastest, cheapest version of GPT-5 for summarization and classification tasks\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window",
                "enum": [
                  "gpt-4.1",
                  "gpt-5",
                  "gpt-5-mini",
                  "gpt-5-nano",
                  "gpt4.1",
                  "gpt5",
                  "gpt5-mini",
                  "gpt5-nano",
                  "gpt5mini",
                  "gpt5nano",
                  "mini",
                  "nano",
                  "o3",
                  "o3-mini",
                  "o3-pro",
                  "o3mini",
                  "o4-mini",
                  "o4mini"
                ]
              },
              "models": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "model": {
                      "type": "string"
                    },
                    "stance": {
                      "type": "string",
                      "enum": [
                        "for",
                        "against",
                        "neutral"
                      ],
                      "default": "neutral"
                    },
                    "stance_prompt": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "model"
                  ]
                },
                "description": "List of model configurations to consult. Each can have a model name, stance (for/against/neutral), and optional custom stance prompt. The same model can be used multiple times with different stances, but each model + stance combination must be unique. Example: [{'model': 'o3', 'stance': 'for'}, {'model': 'o3', 'stance': 'against'}, {'model': 'flash', 'stance': 'neutral'}]"
              },
              "current_model_index": {
                "type": "integer",
                "minimum": 0,
                "description": "Internal tracking of which model is being consulted (0-based index). Used to determine which model to call next."
              },
              "model_responses": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Accumulated responses from models consulted so far. Internal field for tracking progress."
              }
            },
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings"
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "additionalProperties": false,
            "title": "ConsensusRequest"
          }
        },
        {
          "name": "codereview",
          "description": "Performs systematic, step-by-step code review with expert validation. Use for comprehensive analysis covering quality, security, performance, and architecture. Guides through structured investigation to ensure thoroughness.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "step": {
                "type": "string",
                "description": "Review plan. Step 1: State strategy. Later: Report findings. MUST examine quality, security, performance, architecture. Use 'relevant_files' for code. NO large snippets."
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "Current step index in review sequence (starts at 1). Build upon previous steps."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Estimated steps needed to complete the review. IMPORTANT: For external validation, max 2 steps. For internal validation, use 1 step. When continuation_id is provided (continuing a previous conversation), set to 2 max for external, 1 for internal."
              },
              "next_step_required": {
                "type": "boolean",
                "description": "True to continue with another step, False when review is complete. CRITICAL for external validation: Set to True on step 1, then False on step 2. For internal validation: Set to False immediately. When continuation_id is provided: Follow the same rules based on validation type."
              },
              "findings": {
                "type": "string",
                "description": "Discoveries: quality, security, performance, architecture. Document positive+negative. Update in later steps."
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "All examined files (absolute paths), including ruled-out ones."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Step 1: All files/dirs for review. Final: Subset with key findings (issues, patterns, decisions)."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Issues with 'severity' (critical/high/medium/low) and 'description'. Vulnerabilities, performance, quality."
              },
              "confidence": {
                "type": "string",
                "enum": [
                  "exploring",
                  "low",
                  "medium",
                  "high",
                  "very_high",
                  "almost_certain",
                  "certain"
                ],
                "description": "Confidence level: exploring (just starting), low (early investigation), medium (some evidence), high (strong evidence), very_high (comprehensive understanding), almost_certain (near complete confidence), certain (100% confidence locally - no external validation needed)"
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about issue/goal based on work"
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "Step number to backtrack from if revision needed."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Use assistant model for expert analysis after workflow steps. False skips expert analysis, relies solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "temperature": {
                "type": "number",
                "description": "Lower values: focused/deterministic; higher: creative. Tool-specific defaults apply if unspecified.",
                "minimum": 0,
                "maximum": 1
              },
              "thinking_mode": {
                "type": "string",
                "enum": [
                  "minimal",
                  "low",
                  "medium",
                  "high",
                  "max"
                ],
                "description": "Thinking depth: minimal (0.5%), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes: deeper reasoning but slower."
              },
              "use_websearch": {
                "type": "boolean",
                "description": "Enable web search for docs and current info. Model can request Claude to perform web-search for best practices, framework docs, solution research, latest API information.",
                "default": true
              },
              "continuation_id": {
                "type": "string",
                "description": "Unique thread continuation ID for multi-turn conversations. Reuse last continuation_id when continuing discussion (unless user provides different ID) using exact unique identifer. Embeds complete conversation history. Build upon history without repeating. Focus on new insights. Works across different tools."
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional diagrams, mockups, visuals for review context (absolute paths). Include if materially helpful."
              },
              "model": {
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'gpt-5-mini': GPT-5-mini (400K context, 128K output) - Efficient variant with reasoning support\n- 'gpt-5-nano': GPT-5 nano (400K context) - Fastest, cheapest version of GPT-5 for summarization and classification tasks\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window",
                "enum": [
                  "gpt-4.1",
                  "gpt-5",
                  "gpt-5-mini",
                  "gpt-5-nano",
                  "gpt4.1",
                  "gpt5",
                  "gpt5-mini",
                  "gpt5-nano",
                  "gpt5mini",
                  "gpt5nano",
                  "mini",
                  "nano",
                  "o3",
                  "o3-mini",
                  "o3-pro",
                  "o3mini",
                  "o4-mini",
                  "o4mini"
                ]
              },
              "review_validation_type": {
                "type": "string",
                "enum": [
                  "external",
                  "internal"
                ],
                "default": "external",
                "description": "'external' (default, expert model) or 'internal' (no expert). Default external unless user specifies."
              },
              "review_type": {
                "type": "string",
                "enum": [
                  "full",
                  "security",
                  "performance",
                  "quick"
                ],
                "default": "full",
                "description": "Review type: full, security, performance, quick."
              },
              "focus_on": {
                "type": "string",
                "description": "Specific aspects or context for areas of concern."
              },
              "standards": {
                "type": "string",
                "description": "Coding standards to enforce."
              },
              "severity_filter": {
                "type": "string",
                "enum": [
                  "critical",
                  "high",
                  "medium",
                  "low",
                  "all"
                ],
                "default": "all",
                "description": "Minimum severity to report."
              }
            },
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "additionalProperties": false,
            "title": "CodereviewRequest"
          }
        },
        {
          "name": "precommit",
          "description": "Validates git changes and repository state before committing with systematic analysis. Use for multi-repository validation, security review, change impact assessment, and completeness verification. Guides through structured investigation with expert analysis.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "step": {
                "type": "string",
                "description": "Validation plan. Step 1: State strategy. Later: Report findings. MUST examine git changes, analyze impacts. Use 'relevant_files' for code. NO large snippets."
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "Current step index in pre-commit sequence (starts at 1). Build upon previous steps."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 3,
                "description": "Estimated steps needed to complete validation. IMPORTANT: For external validation, use max 3 steps. For internal validation, use 1 step. When continuation_id is provided (continuing a previous conversation), set to 3 max for external, 1 for internal."
              },
              "next_step_required": {
                "type": "boolean",
                "description": "True to continue with another step, False when validation is complete. CRITICAL: If total_steps>=3, set to True until the final step. When continuation_id is provided: Follow the same validation rules based on precommit_type."
              },
              "findings": {
                "type": "string",
                "description": "Discoveries: git diffs, modifications, issues (bugs, missing tests, security). Document positive+concerns. Update in later steps."
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "All examined files (absolute paths), including ruled-out ones."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Files with changes or relevant to validation (absolute paths). Modified files, config, tests, docs."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Issues with 'severity' (critical/high/medium/low) and 'description'. Bugs, security, performance."
              },
              "confidence": {
                "type": "string",
                "enum": [
                  "exploring",
                  "low",
                  "medium",
                  "high",
                  "very_high",
                  "almost_certain",
                  "certain"
                ],
                "description": "Confidence level: exploring (just starting), low (early investigation), medium (some evidence), high (strong evidence), very_high (comprehensive understanding), almost_certain (near complete confidence), certain (100% confidence locally - no external validation needed)"
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about issue/goal based on work"
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "Step number to backtrack from if revision needed."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Use assistant model for expert analysis after workflow steps. False skips expert analysis, relies solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "temperature": {
                "type": "number",
                "description": "Lower values: focused/deterministic; higher: creative. Tool-specific defaults apply if unspecified.",
                "minimum": 0,
                "maximum": 1
              },
              "thinking_mode": {
                "type": "string",
                "enum": [
                  "minimal",
                  "low",
                  "medium",
                  "high",
                  "max"
                ],
                "description": "Thinking depth: minimal (0.5%), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes: deeper reasoning but slower."
              },
              "use_websearch": {
                "type": "boolean",
                "description": "Enable web search for docs and current info. Model can request Claude to perform web-search for best practices, framework docs, solution research, latest API information.",
                "default": true
              },
              "continuation_id": {
                "type": "string",
                "description": "Unique thread continuation ID for multi-turn conversations. Reuse last continuation_id when continuing discussion (unless user provides different ID) using exact unique identifer. Embeds complete conversation history. Build upon history without repeating. Focus on new insights. Works across different tools."
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional screenshots/visuals for validation (absolute paths)."
              },
              "model": {
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'gpt-5-mini': GPT-5-mini (400K context, 128K output) - Efficient variant with reasoning support\n- 'gpt-5-nano': GPT-5 nano (400K context) - Fastest, cheapest version of GPT-5 for summarization and classification tasks\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window",
                "enum": [
                  "gpt-4.1",
                  "gpt-5",
                  "gpt-5-mini",
                  "gpt-5-nano",
                  "gpt4.1",
                  "gpt5",
                  "gpt5-mini",
                  "gpt5-nano",
                  "gpt5mini",
                  "gpt5nano",
                  "mini",
                  "nano",
                  "o3",
                  "o3-mini",
                  "o3-pro",
                  "o3mini",
                  "o4-mini",
                  "o4mini"
                ]
              },
              "precommit_type": {
                "type": "string",
                "enum": [
                  "external",
                  "internal"
                ],
                "default": "external",
                "description": "'external' (default, expert review) or 'internal' (local only). Default external unless user specifies."
              },
              "path": {
                "type": "string",
                "description": "Starting path for git repos (FULL absolute path). REQUIRED step 1."
              },
              "compare_to": {
                "type": "string",
                "description": "Optional git ref (branch/tag/commit) to compare. Checks remotes if needed. Without: checks staged/unstaged."
              },
              "include_staged": {
                "type": "boolean",
                "default": true,
                "description": "Analyze staged changes. Ignored if 'compare_to' provided."
              },
              "include_unstaged": {
                "type": "boolean",
                "default": true,
                "description": "Analyze unstaged changes. Ignored if 'compare_to' provided."
              },
              "focus_on": {
                "type": "string",
                "description": "Focus aspects: security, performance, test coverage."
              },
              "severity_filter": {
                "type": "string",
                "enum": [
                  "critical",
                  "high",
                  "medium",
                  "low",
                  "all"
                ],
                "default": "all",
                "description": "Minimum severity to report."
              }
            },
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "additionalProperties": false,
            "title": "PrecommitRequest"
          }
        },
        {
          "name": "debug",
          "description": "Performs systematic debugging and root cause analysis for any type of issue. Use for complex bugs, mysterious errors, performance issues, race conditions, memory leaks, and integration problems. Guides through structured investigation with hypothesis testing and expert analysis.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "step": {
                "type": "string",
                "description": "Investigation step. Step 1: State issue+direction. Symptoms misleading; 'no bug' valid. Trace dependencies, verify hypotheses. Use relevant_files for code; this for text only."
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "Current step index (starts at 1). Build upon previous steps."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Estimated total steps needed to complete the investigation. Adjust as new findings emerge. IMPORTANT: When continuation_id is provided (continuing a previous conversation), set this to 1 as we're not starting a new multi-step investigation."
              },
              "next_step_required": {
                "type": "boolean",
                "description": "True if you plan to continue the investigation with another step. False means root cause is known or investigation is complete. IMPORTANT: When continuation_id is provided (continuing a previous conversation), set this to False to immediately proceed with expert analysis."
              },
              "findings": {
                "type": "string",
                "description": "Discoveries: clues, code/log evidence, disproven theories. Be specific. If no bug found, document clearly as valid."
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "All examined files (absolute paths), including ruled-out ones."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Files directly relevant to issue (absolute paths). Cause, trigger, or manifestation locations."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Issues identified with severity levels during work"
              },
              "confidence": {
                "type": "string",
                "enum": [
                  "exploring",
                  "low",
                  "medium",
                  "high",
                  "very_high",
                  "almost_certain",
                  "certain"
                ],
                "description": "Your confidence in the hypothesis: exploring (starting out), low (early idea), medium (some evidence), high (strong evidence), very_high (very strong evidence), almost_certain (nearly confirmed), certain (100% confidence - root cause and fix are both confirmed locally with no need for external validation). WARNING: Do NOT use 'certain' unless the issue can be fully resolved with a fix, use 'very_high' or 'almost_certain' instead when not 100% sure. Using 'certain' means you have ABSOLUTE confidence locally and PREVENTS external model validation."
              },
              "hypothesis": {
                "type": "string",
                "description": "Concrete root cause theory from evidence. Can revise. Valid: 'No bug found - user misunderstanding' or 'Symptoms unrelated to code' if supported."
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "Step number to backtrack from if revision needed."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Use assistant model for expert analysis after workflow steps. False skips expert analysis, relies solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "temperature": {
                "type": "number",
                "description": "Lower values: focused/deterministic; higher: creative. Tool-specific defaults apply if unspecified.",
                "minimum": 0,
                "maximum": 1
              },
              "thinking_mode": {
                "type": "string",
                "enum": [
                  "minimal",
                  "low",
                  "medium",
                  "high",
                  "max"
                ],
                "description": "Thinking depth: minimal (0.5%), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes: deeper reasoning but slower."
              },
              "use_websearch": {
                "type": "boolean",
                "description": "Enable web search for docs and current info. Model can request Claude to perform web-search for best practices, framework docs, solution research, latest API information.",
                "default": true
              },
              "continuation_id": {
                "type": "string",
                "description": "Unique thread continuation ID for multi-turn conversations. Reuse last continuation_id when continuing discussion (unless user provides different ID) using exact unique identifer. Embeds complete conversation history. Build upon history without repeating. Focus on new insights. Works across different tools."
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional screenshots/visuals clarifying issue (absolute paths)."
              },
              "model": {
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'gpt-5-mini': GPT-5-mini (400K context, 128K output) - Efficient variant with reasoning support\n- 'gpt-5-nano': GPT-5 nano (400K context) - Fastest, cheapest version of GPT-5 for summarization and classification tasks\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window",
                "enum": [
                  "gpt-4.1",
                  "gpt-5",
                  "gpt-5-mini",
                  "gpt-5-nano",
                  "gpt4.1",
                  "gpt5",
                  "gpt5-mini",
                  "gpt5-nano",
                  "gpt5mini",
                  "gpt5nano",
                  "mini",
                  "nano",
                  "o3",
                  "o3-mini",
                  "o3-pro",
                  "o3mini",
                  "o4-mini",
                  "o4mini"
                ]
              }
            },
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "additionalProperties": false,
            "title": "DebugRequest"
          }
        },
        {
          "name": "secaudit",
          "description": "Performs comprehensive security audit with systematic vulnerability assessment. Use for OWASP Top 10 analysis, compliance evaluation, threat modeling, and security architecture review. Guides through structured security investigation with expert validation.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "step": {
                "type": "string",
                "description": "Audit plan. Step 1: State strategy. Later: Report findings. MANDATORY: Systematic approach (OWASP Top 10, auth, validation). Use 'relevant_files'. NO large code."
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "Current step in audit sequence (starts at 1)."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Estimated steps for audit. Adjust as findings emerge."
              },
              "next_step_required": {
                "type": "boolean",
                "description": "True to continue. False when ALL threats uncovered, ready for validation."
              },
              "findings": {
                "type": "string",
                "description": "Discoveries: vulnerabilities, auth issues, validation gaps, compliance. Document positives and concerns. Update past findings."
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "All files examined (absolute paths). Include ruled-out files."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Step 1: Files to audit (absolute paths). Final: Files with security issues, auth modules, config files."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Security issues as dict: 'severity' (critical/high/medium/low), 'description'. Include vulnerabilities, auth flaws, injection, crypto weakness, config issues."
              },
              "confidence": {
                "type": "string",
                "enum": [
                  "exploring",
                  "low",
                  "medium",
                  "high",
                  "very_high",
                  "almost_certain",
                  "certain"
                ],
                "description": "exploring/low/medium/high/very_high/almost_certain/certain. CRITICAL: 'certain' PREVENTS external validation."
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about issue/goal based on work"
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "Step number to backtrack from if revision needed."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Use assistant model for expert analysis after workflow steps. False skips expert analysis, relies solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "temperature": {
                "type": "number",
                "description": "Lower values: focused/deterministic; higher: creative. Tool-specific defaults apply if unspecified.",
                "minimum": 0,
                "maximum": 1
              },
              "thinking_mode": {
                "type": "string",
                "enum": [
                  "minimal",
                  "low",
                  "medium",
                  "high",
                  "max"
                ],
                "description": "Thinking depth: minimal (0.5%), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes: deeper reasoning but slower."
              },
              "use_websearch": {
                "type": "boolean",
                "description": "Enable web search for docs and current info. Model can request Claude to perform web-search for best practices, framework docs, solution research, latest API information.",
                "default": true
              },
              "continuation_id": {
                "type": "string",
                "description": "Unique thread continuation ID for multi-turn conversations. Reuse last continuation_id when continuing discussion (unless user provides different ID) using exact unique identifer. Embeds complete conversation history. Build upon history without repeating. Focus on new insights. Works across different tools."
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional: Architecture diagrams, security models, threat models (absolute paths). Only if assists security assessment."
              },
              "model": {
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'gpt-5-mini': GPT-5-mini (400K context, 128K output) - Efficient variant with reasoning support\n- 'gpt-5-nano': GPT-5 nano (400K context) - Fastest, cheapest version of GPT-5 for summarization and classification tasks\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window",
                "enum": [
                  "gpt-4.1",
                  "gpt-5",
                  "gpt-5-mini",
                  "gpt-5-nano",
                  "gpt4.1",
                  "gpt5",
                  "gpt5-mini",
                  "gpt5-nano",
                  "gpt5mini",
                  "gpt5nano",
                  "mini",
                  "nano",
                  "o3",
                  "o3-mini",
                  "o3-pro",
                  "o3mini",
                  "o4-mini",
                  "o4mini"
                ]
              },
              "security_scope": {
                "type": "string",
                "description": "Security context (web/mobile/API/enterprise/cloud). Include stack, user types, data sensitivity, threat landscape. This helps focus the security assessment appropriately."
              },
              "threat_level": {
                "type": "string",
                "enum": [
                  "low",
                  "medium",
                  "high",
                  "critical"
                ],
                "default": "medium",
                "description": "Assess the threat level based on application context: 'low' (internal tools, low-risk data), 'medium' (customer-facing, business data), 'high' (financial, healthcare, regulated industry), 'critical' (payment processing, sensitive personal data). This guides prioritization."
              },
              "compliance_requirements": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List applicable compliance frameworks and security standards (SOC2, PCI DSS, HIPAA, GDPR, ISO 27001, NIST). Include industry-specific requirements that affect security controls."
              },
              "audit_focus": {
                "type": "string",
                "enum": [
                  "owasp",
                  "compliance",
                  "infrastructure",
                  "dependencies",
                  "comprehensive"
                ],
                "default": "comprehensive",
                "description": "Primary security focus areas for this audit (owasp, compliance, infrastructure, dependencies)"
              },
              "severity_filter": {
                "type": "string",
                "enum": [
                  "critical",
                  "high",
                  "medium",
                  "low",
                  "all"
                ],
                "default": "all",
                "description": "Minimum severity level to report on the security issues found"
              }
            },
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "additionalProperties": false,
            "title": "SecauditRequest"
          }
        },
        {
          "name": "docgen",
          "description": "Generates comprehensive code documentation with systematic analysis of functions, classes, and complexity. Use for documentation generation, code analysis, complexity assessment, and API documentation. Analyzes code structure and patterns to create thorough documentation.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "step": {
                "type": "string",
                "description": "Current work step content and findings from your overall work"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "Current step number in work sequence (starts at 1)"
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Estimated total steps needed to complete work"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Whether another work step is needed. When false, aim to reduce total_steps to match step_number to avoid mismatch."
              },
              "findings": {
                "type": "string",
                "description": "Important findings, evidence and insights discovered in this step"
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Files identified as relevant to issue/goal (FULL absolute paths to real files/folders - DO NOT SHORTEN)"
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Issues identified with severity levels during work"
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Use assistant model for expert analysis after workflow steps. False skips expert analysis, relies solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "continuation_id": {
                "type": "string",
                "description": "Unique thread continuation ID for multi-turn conversations. Reuse last continuation_id when continuing discussion (unless user provides different ID) using exact unique identifer. Embeds complete conversation history. Build upon history without repeating. Focus on new insights. Works across different tools."
              },
              "document_complexity": {
                "type": "boolean",
                "default": true,
                "description": "Whether to include algorithmic complexity (Big O) analysis in function/method documentation. Default: true. When enabled, analyzes and documents the computational complexity of algorithms."
              },
              "document_flow": {
                "type": "boolean",
                "default": true,
                "description": "Whether to include call flow and dependency information in documentation. Default: true. When enabled, documents which methods this function calls and which methods call this function."
              },
              "update_existing": {
                "type": "boolean",
                "default": true,
                "description": "Whether to update existing documentation when it's found to be incorrect or incomplete. Default: true. When enabled, improves existing docs rather than just adding new ones."
              },
              "comments_on_complex_logic": {
                "type": "boolean",
                "default": true,
                "description": "Whether to add inline comments around complex logic within functions. Default: true. When enabled, adds explanatory comments for non-obvious algorithmic steps."
              },
              "num_files_documented": {
                "type": "integer",
                "default": 0,
                "minimum": 0,
                "description": "Counter for fully documented files. Starts at 0. Increment only when a file is 100% complete. CRITICAL: Must equal 'total_files_to_document' to finish."
              },
              "total_files_to_document": {
                "type": "integer",
                "default": 0,
                "minimum": 0,
                "description": "Counter for total files needing documentation. Set in step 1 during discovery. This is the completion target for the 'num_files_documented' counter."
              }
            },
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "document_complexity",
              "document_flow",
              "update_existing",
              "comments_on_complex_logic",
              "num_files_documented",
              "total_files_to_document"
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "additionalProperties": false,
            "title": "DocgenRequest"
          }
        },
        {
          "name": "analyze",
          "description": "Performs comprehensive code analysis with systematic investigation and expert validation. Use for architecture, performance, maintainability, and pattern analysis. Guides through structured code review and strategic planning.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "step": {
                "type": "string",
                "description": "The analysis plan. Step 1: State your strategy, including how you will map the codebase structure, understand business logic, and assess code quality, performance implications, and architectural patterns. Later steps: Report findings and adapt the approach as new insights emerge."
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the analysis sequence, beginning at 1. Each step should build upon or revise the previous one."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Your current estimate for how many steps will be needed to complete the analysis. Adjust as new findings emerge."
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if you plan to continue the investigation with another step. False means you believe the analysis is complete and ready for expert validation."
              },
              "findings": {
                "type": "string",
                "description": "Summary of discoveries from this step, including architectural patterns, tech stack assessment, scalability characteristics, performance implications, maintainability factors, and strategic improvement opportunities. IMPORTANT: Document both strengths (good patterns, solid architecture) and concerns (tech debt, overengineering, unnecessary complexity). In later steps, confirm or update past findings with additional evidence."
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List all files examined (absolute paths). Include even ruled-out files to track exploration path."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Subset of files_checked directly relevant to analysis findings (absolute paths). Include files with significant patterns, architectural decisions, or strategic improvement opportunities."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Issues or concerns identified during analysis, each with severity level (critical, high, medium, low)"
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If an earlier finding needs revision, specify the step number to backtrack from."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Use assistant model for expert analysis after workflow steps. False skips expert analysis, relies solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "temperature": {
                "type": "number",
                "description": "Lower values: focused/deterministic; higher: creative. Tool-specific defaults apply if unspecified.",
                "minimum": 0,
                "maximum": 1
              },
              "thinking_mode": {
                "type": "string",
                "enum": [
                  "minimal",
                  "low",
                  "medium",
                  "high",
                  "max"
                ],
                "description": "Thinking depth: minimal (0.5%), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes: deeper reasoning but slower."
              },
              "use_websearch": {
                "type": "boolean",
                "description": "Enable web search for docs and current info. Model can request Claude to perform web-search for best practices, framework docs, solution research, latest API information.",
                "default": true
              },
              "continuation_id": {
                "type": "string",
                "description": "Unique thread continuation ID for multi-turn conversations. Reuse last continuation_id when continuing discussion (unless user provides different ID) using exact unique identifer. Embeds complete conversation history. Build upon history without repeating. Focus on new insights. Works across different tools."
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional absolute paths to architecture diagrams or visual references that help with analysis context."
              },
              "model": {
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'gpt-5-mini': GPT-5-mini (400K context, 128K output) - Efficient variant with reasoning support\n- 'gpt-5-nano': GPT-5 nano (400K context) - Fastest, cheapest version of GPT-5 for summarization and classification tasks\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window",
                "enum": [
                  "gpt-4.1",
                  "gpt-5",
                  "gpt-5-mini",
                  "gpt-5-nano",
                  "gpt4.1",
                  "gpt5",
                  "gpt5-mini",
                  "gpt5-nano",
                  "gpt5mini",
                  "gpt5nano",
                  "mini",
                  "nano",
                  "o3",
                  "o3-mini",
                  "o3-pro",
                  "o3mini",
                  "o4-mini",
                  "o4mini"
                ]
              },
              "confidence": {
                "type": "string",
                "enum": [
                  "exploring",
                  "low",
                  "medium",
                  "high",
                  "very_high",
                  "almost_certain",
                  "certain"
                ],
                "description": "Your confidence in the analysis: exploring, low, medium, high, very_high, almost_certain, or certain. 'certain' indicates the analysis is complete and ready for validation."
              },
              "analysis_type": {
                "type": "string",
                "enum": [
                  "architecture",
                  "performance",
                  "security",
                  "quality",
                  "general"
                ],
                "default": "general",
                "description": "Type of analysis to perform (architecture, performance, security, quality, general)"
              },
              "output_format": {
                "type": "string",
                "enum": [
                  "summary",
                  "detailed",
                  "actionable"
                ],
                "default": "detailed",
                "description": "How to format the output (summary, detailed, actionable)"
              }
            },
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "additionalProperties": false,
            "title": "AnalyzeRequest"
          }
        },
        {
          "name": "refactor",
          "description": "Analyzes code for refactoring opportunities with systematic investigation. Use for code smell detection, decomposition planning, modernization, and maintainability improvements. Guides through structured analysis with expert validation.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "step": {
                "type": "string",
                "description": "The refactoring plan. Step 1: State strategy. Later steps: Report findings. CRITICAL: Examine code for smells, and opportunities for decomposition, modernization, and organization. Use 'relevant_files' for code. FORBIDDEN: Large code snippets."
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the refactoring investigation sequence, beginning at 1. Each step should build upon or revise the previous one."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Your current estimate for how many steps will be needed to complete the refactoring investigation. Adjust as new opportunities emerge."
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if you plan to continue the investigation with another step. False means you believe the refactoring analysis is complete and ready for expert validation."
              },
              "findings": {
                "type": "string",
                "description": "Summary of discoveries from this step, including code smells and opportunities for decomposition, modernization, or organization. Document both strengths and weaknesses. In later steps, confirm or update past findings."
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List all files examined (absolute paths). Include even ruled-out files to track exploration path."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Subset of files_checked with code requiring refactoring (absolute paths). Include files with code smells, decomposition needs, or improvement opportunities."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Refactoring opportunities as dictionaries with 'severity' (critical/high/medium/low), 'type' (codesmells/decompose/modernize/organization), and 'description'. Include all improvement opportunities found."
              },
              "confidence": {
                "type": "string",
                "enum": [
                  "exploring",
                  "incomplete",
                  "partial",
                  "complete"
                ],
                "default": "incomplete",
                "description": "Your confidence in refactoring analysis: exploring (starting), incomplete (significant work remaining), partial (some opportunities found, more analysis needed), complete (comprehensive analysis finished, all major opportunities identified). WARNING: Use 'complete' ONLY when fully analyzed and can provide recommendations without expert help. 'complete' PREVENTS expert validation. Use 'partial' for large files or uncertain analysis."
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about issue/goal based on work"
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If an earlier finding needs revision, specify the step number to backtrack from."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Use assistant model for expert analysis after workflow steps. False skips expert analysis, relies solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "temperature": {
                "type": "number",
                "description": "Lower values: focused/deterministic; higher: creative. Tool-specific defaults apply if unspecified.",
                "minimum": 0,
                "maximum": 1
              },
              "thinking_mode": {
                "type": "string",
                "enum": [
                  "minimal",
                  "low",
                  "medium",
                  "high",
                  "max"
                ],
                "description": "Thinking depth: minimal (0.5%), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes: deeper reasoning but slower."
              },
              "use_websearch": {
                "type": "boolean",
                "description": "Enable web search for docs and current info. Model can request Claude to perform web-search for best practices, framework docs, solution research, latest API information.",
                "default": true
              },
              "continuation_id": {
                "type": "string",
                "description": "Unique thread continuation ID for multi-turn conversations. Reuse last continuation_id when continuing discussion (unless user provides different ID) using exact unique identifer. Embeds complete conversation history. Build upon history without repeating. Focus on new insights. Works across different tools."
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of absolute paths to architecture diagrams, UI mockups, design documents, or visual references that help with refactoring context. Only include if they materially assist understanding or assessment."
              },
              "model": {
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'gpt-5-mini': GPT-5-mini (400K context, 128K output) - Efficient variant with reasoning support\n- 'gpt-5-nano': GPT-5 nano (400K context) - Fastest, cheapest version of GPT-5 for summarization and classification tasks\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window",
                "enum": [
                  "gpt-4.1",
                  "gpt-5",
                  "gpt-5-mini",
                  "gpt-5-nano",
                  "gpt4.1",
                  "gpt5",
                  "gpt5-mini",
                  "gpt5-nano",
                  "gpt5mini",
                  "gpt5nano",
                  "mini",
                  "nano",
                  "o3",
                  "o3-mini",
                  "o3-pro",
                  "o3mini",
                  "o4-mini",
                  "o4mini"
                ]
              },
              "refactor_type": {
                "type": "string",
                "enum": [
                  "codesmells",
                  "decompose",
                  "modernize",
                  "organization"
                ],
                "default": "codesmells",
                "description": "Type of refactoring analysis to perform (codesmells, decompose, modernize, organization)"
              },
              "focus_areas": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Specific areas to focus on (e.g., 'performance', 'readability', 'maintainability', 'security')"
              },
              "style_guide_examples": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional existing code files to use as style/pattern reference (must be FULL absolute paths to real files / folders - DO NOT SHORTEN). These files represent the target coding style and patterns for the project."
              }
            },
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "additionalProperties": false,
            "title": "RefactorRequest"
          }
        },
        {
          "name": "tracer",
          "description": "Performs systematic code tracing with modes for execution flow or dependency mapping. Use for method execution analysis, call chain tracing, dependency mapping, and architectural understanding. Supports precision mode (execution flow) and dependencies mode (structural relationships).",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "step": {
                "type": "string",
                "description": "Current work step content and findings from your overall work"
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "Current step number in work sequence (starts at 1)"
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Estimated total steps needed to complete work"
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Whether another work step is needed. When false, aim to reduce total_steps to match step_number to avoid mismatch."
              },
              "findings": {
                "type": "string",
                "description": "Important findings, evidence and insights discovered in this step"
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of files examined during this work step"
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Files identified as relevant to issue/goal (FULL absolute paths to real files/folders - DO NOT SHORTEN)"
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "confidence": {
                "type": "string",
                "enum": [
                  "exploring",
                  "low",
                  "medium",
                  "high",
                  "very_high",
                  "almost_certain",
                  "certain"
                ],
                "description": "Confidence level: exploring (just starting), low (early investigation), medium (some evidence), high (strong evidence), very_high (comprehensive understanding), almost_certain (near complete confidence), certain (100% confidence locally - no external validation needed)"
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Use assistant model for expert analysis after workflow steps. False skips expert analysis, relies solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "continuation_id": {
                "type": "string",
                "description": "Unique thread continuation ID for multi-turn conversations. Reuse last continuation_id when continuing discussion (unless user provides different ID) using exact unique identifer. Embeds complete conversation history. Build upon history without repeating. Focus on new insights. Works across different tools."
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional paths to architecture diagrams or flow charts that help understand the tracing context."
              },
              "model": {
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'gpt-5-mini': GPT-5-mini (400K context, 128K output) - Efficient variant with reasoning support\n- 'gpt-5-nano': GPT-5 nano (400K context) - Fastest, cheapest version of GPT-5 for summarization and classification tasks\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window",
                "enum": [
                  "gpt-4.1",
                  "gpt-5",
                  "gpt-5-mini",
                  "gpt-5-nano",
                  "gpt4.1",
                  "gpt5",
                  "gpt5-mini",
                  "gpt5-nano",
                  "gpt5mini",
                  "gpt5nano",
                  "mini",
                  "nano",
                  "o3",
                  "o3-mini",
                  "o3-pro",
                  "o3mini",
                  "o4-mini",
                  "o4mini"
                ]
              },
              "trace_mode": {
                "type": "string",
                "enum": [
                  "precision",
                  "dependencies",
                  "ask"
                ],
                "description": "Type of tracing: 'ask' (default - prompts user to choose mode), 'precision' (execution flow) or 'dependencies' (structural relationships)"
              },
              "target_description": {
                "type": "string",
                "description": "Description of what to trace and WHY. Include context about what you're trying to understand or analyze."
              }
            },
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "target_description",
              "trace_mode",
              "model"
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "additionalProperties": false,
            "title": "TracerRequest"
          }
        },
        {
          "name": "testgen",
          "description": "Creates comprehensive test suites with edge case coverage for specific functions, classes, or modules. Analyzes code paths, identifies failure modes, and generates framework-specific tests. Be specific about scope - target particular components rather than testing everything.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "step": {
                "type": "string",
                "description": "The test plan for this step. Step 1: State strategy for analyzing code structure, business logic, critical paths, and edge cases. Later steps: Report findings and adapt as new test scenarios are identified."
              },
              "step_number": {
                "type": "integer",
                "minimum": 1,
                "description": "The index of the current step in the test generation sequence, beginning at 1. Each step should build upon or revise the previous one."
              },
              "total_steps": {
                "type": "integer",
                "minimum": 1,
                "description": "Your current estimate for how many steps will be needed to complete the test generation analysis. Adjust as new findings emerge."
              },
              "next_step_required": {
                "type": "boolean",
                "description": "Set to true if you plan to continue the investigation with another step. False means you believe the test generation analysis is complete and ready for expert validation."
              },
              "findings": {
                "type": "string",
                "description": "Summary of discoveries about the code being tested. Include analysis of functionality, critical paths, edge cases, boundary conditions, and error handling. IMPORTANT: Document both happy paths and failure modes. Identify existing test patterns. In later steps, confirm or update past findings."
              },
              "files_checked": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List all files examined (absolute paths). Include even ruled-out files to track exploration path."
              },
              "relevant_files": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Subset of files_checked containing code needing tests (absolute paths). Include implementation files, interfaces, dependencies, or existing test examples."
              },
              "relevant_context": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Methods/functions identified as involved in the issue"
              },
              "issues_found": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "Issues identified with severity levels during work"
              },
              "confidence": {
                "type": "string",
                "enum": [
                  "exploring",
                  "low",
                  "medium",
                  "high",
                  "very_high",
                  "almost_certain",
                  "certain"
                ],
                "description": "Indicate your current confidence in the test generation assessment. Use: 'exploring' (starting analysis), 'low' (early investigation), 'medium' (some patterns identified), 'high' (strong understanding), 'very_high' (very strong understanding), 'almost_certain' (nearly complete test plan), 'certain' (100% confidence - test plan is thoroughly complete and all test scenarios are identified with no need for external model validation). Do NOT use 'certain' unless the test generation analysis is comprehensively complete, use 'very_high' or 'almost_certain' instead if not 100% sure. Using 'certain' means you have complete confidence locally and prevents external model validation."
              },
              "hypothesis": {
                "type": "string",
                "description": "Current theory about issue/goal based on work"
              },
              "backtrack_from_step": {
                "type": "integer",
                "minimum": 1,
                "description": "If an earlier finding needs revision, specify the step number to backtrack from."
              },
              "use_assistant_model": {
                "type": "boolean",
                "default": true,
                "description": "Use assistant model for expert analysis after workflow steps. False skips expert analysis, relies solely on Claude's investigation. Defaults to True for comprehensive validation."
              },
              "temperature": {
                "type": "number",
                "description": "Lower values: focused/deterministic; higher: creative. Tool-specific defaults apply if unspecified.",
                "minimum": 0,
                "maximum": 1
              },
              "thinking_mode": {
                "type": "string",
                "enum": [
                  "minimal",
                  "low",
                  "medium",
                  "high",
                  "max"
                ],
                "description": "Thinking depth: minimal (0.5%), low (8%), medium (33%), high (67%), max (100% of model max). Higher modes: deeper reasoning but slower."
              },
              "use_websearch": {
                "type": "boolean",
                "description": "Enable web search for docs and current info. Model can request Claude to perform web-search for best practices, framework docs, solution research, latest API information.",
                "default": true
              },
              "continuation_id": {
                "type": "string",
                "description": "Unique thread continuation ID for multi-turn conversations. Reuse last continuation_id when continuing discussion (unless user provides different ID) using exact unique identifer. Embeds complete conversation history. Build upon history without repeating. Focus on new insights. Works across different tools."
              },
              "images": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Optional list of absolute paths to architecture diagrams, flow charts, or visual documentation that help understand the code structure and test requirements. Only include if they materially assist test planning."
              },
              "model": {
                "type": "string",
                "description": "IMPORTANT: Use the model specified by the user if provided, OR select the most suitable model for this specific task based on the requirements and capabilities listed below:\n\nOpenAI models - Available when OPENAI_API_KEY is configured:\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'gpt-5-mini': GPT-5-mini (400K context, 128K output) - Efficient variant with reasoning support\n- 'gpt-5-nano': GPT-5 nano (400K context) - Fastest, cheapest version of GPT-5 for summarization and classification tasks\n- 'o3': Strong reasoning (200K context) - Logical problems, code generation, systematic analysis\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window\n- 'gpt-5': GPT-5 (400K context, 128K output) - Advanced model with reasoning support\n- 'o3-mini': Fast O3 variant (200K context) - Balanced performance/speed, moderate complexity\n- 'o3-pro': Professional-grade reasoning (200K context) - EXTREMELY EXPENSIVE: Only for the most complex problems requiring universe-scale complexity analysis OR when the user explicitly asks for this model. Use sparingly for critical architectural decisions or exceptionally complex debugging that other models cannot handle.\n- 'o4-mini': Latest reasoning model (200K context) - Optimized for shorter contexts, rapid reasoning\n- 'gpt-4.1': GPT-4.1 (1M context) - Advanced reasoning model with large context window",
                "enum": [
                  "gpt-4.1",
                  "gpt-5",
                  "gpt-5-mini",
                  "gpt-5-nano",
                  "gpt4.1",
                  "gpt5",
                  "gpt5-mini",
                  "gpt5-nano",
                  "gpt5mini",
                  "gpt5nano",
                  "mini",
                  "nano",
                  "o3",
                  "o3-mini",
                  "o3-pro",
                  "o3mini",
                  "o4-mini",
                  "o4mini"
                ]
              }
            },
            "required": [
              "step",
              "step_number",
              "total_steps",
              "next_step_required",
              "findings",
              "model"
            ],
            "$schema": "http://json-schema.org/draft-07/schema#",
            "additionalProperties": false,
            "title": "TestgenRequest"
          }
        },
        {
          "name": "challenge",
          "description": "Prevents reflexive agreement when users challenge responses by forcing critical thinking and reasoned analysis. Trigger automatically when users critically question, disagree with, or appear to challenge previous statements in ongoing conversations. Promotes truth-seeking over compliance by ensuring thoughtful evaluation rather than automatic agreement.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "prompt": {
                "type": "string",
                "description": "The user's message or statement to analyze critically. When manually invoked with 'challenge', exclude that prefix - just pass the actual content. For automatic invocations (see tool description for conditions), pass the user's complete message unchanged."
              }
            },
            "required": [
              "prompt"
            ]
          }
        },
        {
          "name": "listmodels",
          "description": "Shows which AI model providers are configured, available model names, their aliases and capabilities.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "model": {
                "type": "string",
                "description": "Model to use (ignored by listmodels tool)"
              }
            },
            "required": []
          }
        },
        {
          "name": "version",
          "description": "Get server version, configuration details, and list of available tools.",
          "parametersJsonSchema": {
            "type": "object",
            "properties": {
              "model": {
                "type": "string",
                "description": "Model to use (ignored by version tool)"
              }
            },
            "required": []
          }
        }
      ]
    }
  ],
  "tool_choice": "auto"
}
[OpenAI Provider] Using modern API patterns with tools: 63
[OpenAI] Model gpt-5 only supports default temperature (1), excluding custom temperature from request
[OpenAI Provider] Modern streaming with tools: { toolCount: 63, toolChoice: 'auto', parallelCalls: true }
Hi! How can I help today?

Options to get started:
- Search or navigate code/files
- Read/summarize docs (README, GEMINI.md, OUROBOROS.md)
- Run/build/test (scripts, integration tests)
- Inspect CI/workflows or configs
- Troubleshoot an error/log

Tell me what you’d like to do in the multi-llm repo.[Turn] Successfully completed streaming for provider: openai

