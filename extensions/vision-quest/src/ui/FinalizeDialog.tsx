/**
 * Finalize dialog - confirm persistence or discard
 */

import React, { useState } from 'react';
import { Box, Text, useInput } from 'ink';
import TextInput from 'ink-text-input';
import Gradient from 'ink-gradient';

interface ImplementationResult {
  files: FileChange[];
  patch: string;
  validationResults: ValidationResult[];
  stats: {
    iterations: number;
    duration: number;
    tokensUsed: number;
  };
}

interface FileChange {
  path: string;
  action: 'added' | 'modified' | 'deleted';
  lines: { added: number; removed: number };
}

interface ValidationResult {
  gate: string;
  passed: boolean;
  output?: string;
}

interface FinalizeDialogProps {
  implementation: ImplementationResult;
  onPersist?: (commitMessage: string) => void;
  onDiscard?: () => void;
}

export const FinalizeDialog: React.FC<FinalizeDialogProps> = ({
  implementation,
  onPersist,
  onDiscard,
}) => {
  const [commitMessage, setCommitMessage] = useState(
    `feat: implement Vision Quest design

- Applied automated implementation from Vision Quest
- ${implementation.files.length} files changed
- All validation gates passed

Generated by Ouroboros Vision Quest`
  );
  const [editingMessage, setEditingMessage] = useState(false);
  const [copiedPatch, setCopiedPatch] = useState(false);

  useInput((input) => {
    if (editingMessage) {
      if (input === '\x1B') { // ESC
        setEditingMessage(false);
      }
      return;
    }

    if (input === 'y' || input === 'Y') {
      onPersist?.(commitMessage);
    } else if (input === 'n' || input === 'N') {
      onDiscard?.();
    } else if (input === 'e' || input === 'E') {
      setEditingMessage(true);
    } else if (input === 'c' || input === 'C') {
      // Copy patch to clipboard (would need clipboard integration)
      setCopiedPatch(true);
      setTimeout(() => setCopiedPatch(false), 2000);
    }
  });

  const formatDuration = (ms: number) => {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
  };

  const formatTokens = (tokens: number) => {
    if (tokens > 1000000) {
      return `${(tokens / 1000000).toFixed(1)}M`;
    } else if (tokens > 1000) {
      return `${(tokens / 1000).toFixed(1)}k`;
    }
    return tokens.toString();
  };

  const passedGates = implementation.validationResults.filter(r => r.passed).length;
  const totalGates = implementation.validationResults.length;
  const allPassed = passedGates === totalGates;

  return (
    <Box flexDirection="column" padding={1}>
      <Box borderStyle="double" borderColor={allPassed ? '#00ff00' : '#F9E2AF'} padding={1}>
        <Gradient colors={allPassed ? ['#00ff00', '#00cc00'] : ['#F9E2AF', '#ff628c']}>
          <Text bold>┌─ Persist Changes? ─────────────────────────────────┐</Text>
        </Gradient>
      </Box>

      <Box flexDirection="column" marginTop={1} marginBottom={1}>
        <Box justifyContent="space-between">
          <Text>Provider: <Text color="#89B4FA">GPT-5</Text></Text>
          <Text>
            Model stats: 
            <Text color="#F9E2AF"> {formatTokens(implementation.stats.tokensUsed)} tokens</Text> • 
            <Text color="#A6E3A1"> {implementation.stats.iterations} iterations</Text> • 
            <Text color="#888888"> {formatDuration(implementation.stats.duration)}</Text>
          </Text>
        </Box>

        <Box marginTop={1}>
          <Text>
            Build: 
            {implementation.validationResults.map(result => (
              <Text key={result.gate}>
                {' '}
                <Text color={result.passed ? '#00ff00' : '#ff0000'}>
                  {result.passed ? '✓' : '✗'} {result.gate}
                </Text>
              </Text>
            ))}
          </Text>
        </Box>
      </Box>

      {editingMessage ? (
        <Box borderStyle="single" borderColor="#F9E2AF" padding={1} marginBottom={1}>
          <Box flexDirection="column">
            <Text color="#F9E2AF" bold>Edit Commit Message:</Text>
            <TextInput
              value={commitMessage}
              onChange={setCommitMessage}
              placeholder="Enter commit message..."
            />
            <Text color="#666666" fontSize={12}>Press Enter to save, ESC to cancel</Text>
          </Box>
        </Box>
      ) : (
        <Box borderStyle="single" borderColor="#444444" padding={1} marginBottom={1}>
          <Box flexDirection="column">
            <Text color="#888888">Commit message:</Text>
            <Text color="#CDD6F4">{commitMessage.split('\n')[0]}</Text>
            {commitMessage.split('\n').length > 1 && (
              <Text color="#666666" italic>
                +{commitMessage.split('\n').length - 1} more lines
              </Text>
            )}
          </Box>
        </Box>
      )}

      {copiedPatch && (
        <Box marginBottom={1}>
          <Text color="#00ff00">✓ Patch copied to clipboard!</Text>
        </Box>
      )}

      <Box justifyContent="center" gap={2}>
        <Box borderStyle="single" borderColor="#00ff00" paddingX={1}>
          <Text color="#00ff00" bold>(Y)es persist</Text>
        </Box>
        <Box borderStyle="single" borderColor="#ff0000" paddingX={1}>
          <Text color="#ff0000" bold>(N)o discard</Text>
        </Box>
        <Box borderStyle="single" borderColor="#F9E2AF" paddingX={1}>
          <Text color="#F9E2AF">(E)dit message</Text>
        </Box>
        <Box borderStyle="single" borderColor="#89B4FA" paddingX={1}>
          <Text color="#89B4FA">(C)opy patch</Text>
        </Box>
      </Box>

      {!allPassed && (
        <Box marginTop={1} borderStyle="single" borderColor="#ff0000" padding={1}>
          <Text color="#ff0000">
            ⚠️ Warning: Not all validation gates passed ({passedGates}/{totalGates}).
            Persisting may result in broken code.
          </Text>
        </Box>
      )}
    </Box>
  );
};